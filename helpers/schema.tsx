/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type GameStatus = "active" | "finished" | "lobby";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type PlayerStatus = "active" | "eliminated" | "redeemed";

export type RedemptionRoundStatus = "active" | "completed";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Games {
  code: string;
  createdAt: Generated<Timestamp | null>;
  currentPrizePot: Generated<number>;
  currentQuestionIndex: Generated<number | null>;
  hostName: string;
  id: Generated<number>;
  initialPrizePot: Generated<number>;
  prizePotIncrement: Generated<number>;
  status: Generated<GameStatus>;
  updatedAt: Generated<Timestamp | null>;
  mediaUrl: string | null;
  soundId: string | null;
}

export interface Players {
  eliminatedRound: number | null;
  gameId: number;
  id: Generated<number>;
  joinedAt: Generated<Timestamp | null>;
  status: Generated<PlayerStatus>;
  username: string;
}

export interface Questions {
  correctAnswer: string;
  createdAt: Generated<Timestamp | null>;
  gameId: number;
  id: Generated<number>;
  optionA: string;
  optionB: string;
  optionC: string;
  optionD: string;
  questionIndex: number;
  questionText: string;
}

export interface RedemptionRounds {
  createdAt: Generated<Timestamp | null>;
  endsAt: Timestamp;
  gameId: number;
  id: Generated<number>;
  questionIndex: number;
  redeemedPlayerId: number | null;
  startedAt: Generated<Timestamp>;
  status: Generated<RedemptionRoundStatus>;
}

export interface Votes {
  createdAt: Generated<Timestamp | null>;
  gameId: number;
  id: Generated<number>;
  questionIndex: number;
  redemptionRoundId: number | null;
  votedForPlayerId: number;
  voterPlayerId: number;
}

export interface DB {
  games: Games;
  players: Players;
  questions: Questions;
  redemptionRounds: RedemptionRounds;
  votes: Votes;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const GameStatusArrayValues: [GameStatus, ...GameStatus[]] = ["active","finished","lobby"];
export const PlayerStatusArrayValues: [PlayerStatus, ...PlayerStatus[]] = ["active","eliminated","redeemed"];
export const RedemptionRoundStatusArrayValues: [RedemptionRoundStatus, ...RedemptionRoundStatus[]] = ["active","completed"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.